// Generated by CoffeeScript 1.12.3
(function() {
  var Environmental, exec, unflatten,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  exec = require("child_process").exec;

  unflatten = require('flat').unflatten;

  Environmental = (function() {
    function Environmental(arg) {
      this.ignore = (arg != null ? arg : {}).ignore;
      if (this.ignore == null) {
        this.ignore = ["PWD", "SHLVL", "_"];
      }
    }

    Environmental.config = function(flat, filter) {
      var key, lowerEnv, nested, val;
      if (flat == null) {
        flat = process.env;
      }
      if (filter == null) {
        filter = process.env.NODE_APP_PREFIX;
      }
      if (filter == null) {
        filter = false;
      }
      lowerEnv = {};
      for (key in flat) {
        val = flat[key];
        lowerEnv[key.toLowerCase()] = val;
      }
      nested = unflatten(lowerEnv, {
        overwrite: true,
        object: true,
        delimiter: "_"
      });
      if (filter !== false) {
        return nested[filter.toLowerCase()];
      }
      return nested;
    };

    Environmental.prototype.capture = function(file, cb) {
      var cmd, flat, options, stderr, stdout;
      stdout = [];
      stderr = [];
      flat = {};
      options = {
        env: {}
      };
      return cmd = exec("bash -c 'source " + file + " && env'", options, (function(_this) {
        return function(err, stdout, stderr) {
          var i, item, key, len, parts, ref, ref1, val;
          if (err) {
            return cb("Error while running " + file + ". " + err + ". " + stderr);
          }
          ref = stdout.split("\n");
          for (i = 0, len = ref.length; i < len; i++) {
            item = ref[i];
            parts = item.split("=");
            key = parts.shift();
            val = parts.join("=");
            if (!key) {
              continue;
            }
            if (ref1 = !key, indexOf.call(_this.ignore, ref1) >= 0) {
              continue;
            }
            if (indexOf.call(_this.ignore, key) >= 0) {
              continue;
            }
            flat[key] = val;
          }
          return cb(null, flat);
        };
      })(this));
    };

    return Environmental;

  })();

  module.exports = Environmental;

}).call(this);
