// Generated by CoffeeScript 1.7.1
(function() {
  var Environmental, exec, unflatten;

  exec = require("child_process").exec;

  unflatten = require('flat').unflatten;

  Environmental = (function() {
    function Environmental(config) {
      var _base;
      this.config = config;
      if (this.config == null) {
        this.config = {};
      }
      if ((_base = this.config).ignore == null) {
        _base.ignore = ["PWD", "SHLVL", "_"];
      }
    }

    Environmental.config = function(flat, filter) {
      var key, lowerEnv, nested, val;
      if (flat == null) {
        flat = process.env;
      }
      if (filter == null) {
        filter = process.env.NODE_APP_PREFIX;
      }
      if (filter == null) {
        filter = false;
      }
      lowerEnv = {};
      for (key in flat) {
        val = flat[key];
        lowerEnv[key.toLowerCase()] = val;
      }
      nested = unflatten(lowerEnv, {
        object: true,
        delimiter: "_"
      });
      if (filter !== false) {
        return nested[filter.toLowerCase()];
      }
      return nested;
    };

    Environmental.prototype.capture = function(file, cb) {
      var cmd, flat, options, stderr, stdout;
      stdout = [];
      stderr = [];
      flat = {};
      options = {
        env: {}
      };
      return cmd = exec("bash -c 'source " + file + " && env'", options, (function(_this) {
        return function(err, stdout, stderr) {
          var item, key, parts, val, _i, _len, _ref;
          if (err) {
            return cb("Error while running " + file + ". " + err + ". " + stderr);
          }
          _ref = stdout.split("\n");
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            item = _ref[_i];
            parts = item.split("=");
            key = parts.shift();
            val = parts.join("=");
            if (_this.config.ignore.indexOf(key) !== -1 || !key) {
              continue;
            }
            flat[key] = val;
          }
          return cb(null, flat);
        };
      })(this));
    };

    return Environmental;

  })();

  module.exports = Environmental;

}).call(this);
