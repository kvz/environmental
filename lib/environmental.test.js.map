{"version":3,"sources":["../src/environmental.test.js"],"names":["should","require","expect","Environmental","describe","it","config","MYAPP_REDIS_HOST","to","deep","equal","redis","host","done","have","ownProperty","parent","child","travis","travis_build_dir","build","dir","env","ignore","capture","__dirname","err","flat","be","null","DEBUG","DEPLOY_ENV","MYAPP_REDIS_PASS","NODE_APP_PREFIX","NODE_ENV","SUBDOMAIN","MYAPP_REDIS_PORT"],"mappings":"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","file":"environmental.test.js","sourcesContent":["const should        = require('chai').should()\nconst { expect }    = require('chai')\nconst Environmental = require('../src/environmental')\n\ndescribe('Environmental', () => {\n  describe('config', () => {\n    it('should be config and lowercases', done => {\n      const config = Environmental.config(\n        {MYAPP_REDIS_HOST: '127.0.0.1'}\n      , 'MYAPP')\n\n      expect(config).to.deep.equal({\n        redis: {\n          host: '127.0.0.1',\n        },\n      })\n      return done()\n    })\n\n    it('should default to process.env and be able to find the HOME env var', done => {\n      const config = Environmental.config()\n      expect(config).to.have.ownProperty('home')\n      return done()\n    })\n\n    it('should allow to disable filtering via false', done => {\n      const config = Environmental.config({\n        parent: {\n          child: '1',\n        },\n      }\n      , false)\n      expect(config).to.have.ownProperty('parent')\n      return done()\n    })\n\n    it('should support the convenience shortcut', done => {\n      const config = (require('../src/environmental')).config({\n        'PARENT_CHILD': '1'})\n      expect(config).to.deep.equal({\n        parent: {\n          child: '1',\n        },\n      })\n      return done()\n    })\n\n    return it('should be able handle travis environment', done => {\n      const config = (require('../src/environmental')).config({\n        travis          : 'true',\n        travis_build_dir: '/home/travis/build/kvz/environmental',\n      }\n      )\n\n      expect(config).to.deep.equal({\n        travis: {\n          build: {\n            dir: '/home/travis/build/kvz/environmental',\n          },\n        },\n      })\n      return done()\n    })\n  })\n\n  return describe('capture', () => {\n    it('should be able to capture production.sh and ignore MYAPP_REDIS_PORT', done => {\n      const env = new Environmental({\n        ignore: [\n          'MYAPP_REDIS_PORT',\n          'PWD',\n          'SHLVL',\n          '_',\n        ]})\n      env.capture(`${__dirname}/../envs/production.sh`, (err, flat) => {\n        expect(err).to.be.null\n        expect(flat).to.deep.equal({\n          DEBUG           : '',\n          DEPLOY_ENV      : 'production',\n          MYAPP_REDIS_HOST: '127.0.0.1',\n          MYAPP_REDIS_PASS: '',\n          NODE_APP_PREFIX : 'MYAPP',\n          NODE_ENV        : 'production',\n          SUBDOMAIN       : 'mycompany-myapp',\n        })\n        return done()\n      })\n    })\n\n    return it('should capture environemtn without defining an ignore', done => {\n      const env = new Environmental()\n      env.capture(`${__dirname}/../envs/production.sh`, (err, flat) => {\n        expect(err).to.be.null\n        expect(flat).to.deep.equal({\n          DEBUG           : '',\n          DEPLOY_ENV      : 'production',\n          MYAPP_REDIS_HOST: '127.0.0.1',\n          MYAPP_REDIS_PORT: '6379',\n          MYAPP_REDIS_PASS: '',\n          NODE_APP_PREFIX : 'MYAPP',\n          NODE_ENV        : 'production',\n          SUBDOMAIN       : 'mycompany-myapp',\n        })\n        return done()\n      })\n    })\n  })\n})\n"]}